package lab3.controller;

import lab3.entity.User;
import lab3.services.UserService;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.tags.Param;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.reflect.Array;
import java.util.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserService userService;

    @PostMapping(path="/signup", consumes = MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody String addNewUser (@RequestBody User user){
        System.out.println("User in addNewUser" + user.getEmail());
        // bcrypt used
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        String email = user.getEmail();
        String password = user.getPassword();
        String hashedPassword = passwordEncoder.encode(password);

        user.setPassword(hashedPassword);

        userService.save(user);
        return "Saved";
    }

    @PostMapping(path="/signin", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<User> login (@RequestBody User user  ){
        System.out.println("User in login" + user.getEmail() + " " + user.getPassword());
        String email = user.getEmail();
        String password = user.getPassword();
        Map<String, Object> result = new HashMap();
        List<User> user_object = new ArrayList<User>();
        user_object = userService.login(email, password);
        result.put("correctCredentials", user_object == null ? false : true);
        result.put("rows", user_object);
        return new ResponseEntity(result, HttpStatus.OK);
    }

    @PostMapping(path="/get_user", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<User> getUser(@RequestBody User user) {

        Optional<User> user_object;
        user_object = userService.getUser(user.getId());
        Map<String, Object> result = new HashMap();
        result.put("rows", user_object);

        return new ResponseEntity(result, HttpStatus.OK);

    }

    @PostMapping(path="/update_profile", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<User> updateUser(@RequestBody User user) {

        String msg = userService.updateUser(user);
        return new ResponseEntity("", HttpStatus.OK);

    }


    @PostMapping(value = "/get-user-name", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<User> getUserObject(@RequestBody String details) {

        JSONObject jsonpObject = new JSONObject(details);

        long user_id = jsonpObject.getLong("user_id");

        Optional<User> user = userService.getUserById(user_id);

        Map<String, Object> result = new HashMap();
        result.put("rows", user);
        result.put("data_present", user == null ? false : true);

        return new ResponseEntity(user, HttpStatus.OK);

    }

    @RequestMapping(value="/uploadImage", method=RequestMethod.POST )
    public @ResponseBody ResponseEntity<User> singleSave(@RequestParam("file") MultipartFile file, @RequestParam("user_id") String id ){

        String fileName = null;
        if (!file.isEmpty()) {
            try {
                fileName = file.getOriginalFilename();

                String newFileName = (new Date()).getTime() + "" + file.getOriginalFilename();
                byte[] bytes = file.getBytes();

                BufferedOutputStream buffStream =
                        new BufferedOutputStream(new FileOutputStream(new File("/home/murtaza/Desktop/FreeLancer/src/images/" + "" + newFileName)));
                buffStream.write(bytes);

                buffStream.close();
                User user = userService.setProfileImage(Long.parseLong(id), newFileName);

                Map<String, Object> result = new HashMap();
                result.put("fileType", newFileName);
                return new ResponseEntity(result, HttpStatus.OK);
            } catch (Exception e) {
                return null;
            }
        } else {
            return null;
        }
    }

    @PostMapping(value = "/check_email", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<User> checkEmail(@RequestBody String details) {

        JSONObject jsonpObject = new JSONObject(details);
        String email = jsonpObject.getString("email");
        List<User> user = userService.getUserByEmail(email);
        Map<String, Object> result = new HashMap();
        result.put("emailPresent", user.size() > 0 ? true : false);
        return new ResponseEntity(result, HttpStatus.OK);

    }
}